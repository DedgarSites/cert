---
kind: Template
apiVersion: v1
metadata:
  name: cert
  annotations:
    description: ${APP_NAME} site deployment, written in Golang
    tags: quickstart,golang,${APP_NAME}
    iconClass: icon-golang
labels:
  template: ${APP_NAME}
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: ${APP_NAME}
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/serving-cert-secret-name: ${APP_NAME}
  spec:
    ports:
    - name: 443-tcp
      port: 443
      targetPort: 8443
    selector:
      name: ${APP_NAME}
- kind: ImageStream
  apiVersion: v1
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${APP_NAME}
    name: ${APP_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: quay.io/dedgar/${APP_NAME}:${APP_VER}
      from:
        kind: DockerImage
        name: quay.io/dedgar/${APP_NAME}:${APP_VER}
      importPolicy:
        scheduled: true
      name: "${APP_VER}"
      referencePolicy:
        type: Source
- kind: ImageStream
  apiVersion: v1
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: ${SIDECAR_NAME}
    name: ${SIDECAR_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: quay.io/dedgar/${SIDECAR_NAME}:${SIDECAR_VER}
      from:
        kind: DockerImage
        name: quay.io/dedgar/${SIDECAR_NAME}:${SIDECAR_VER}
      importPolicy:
        scheduled: true
      name: ${SIDECAR_VER}
      referencePolicy:
        type: Source
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${APP_NAME}
    annotations:
      description: Defines how to deploy the application server
  spec:
    strategy:
      type: Rolling
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${APP_NAME}
        from:
          kind: ImageStreamTag
          name: ${APP_NAME}:${APP_VER}
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - ${SIDECAR_NAME}
        from:
          kind: ImageStreamTag
          name: ${SIDECAR_NAME}:${SIDECAR_VER}
    - type: ConfigChange
    replicas: 1
    selector:
      name: ${APP_NAME}
    template:
      metadata:
        name: ${APP_NAME}
        labels:
          name: ${APP_NAME}
      spec:
        containers:
        - name: ${APP_NAME}
          image: quay.io/dedgar/${APP_NAME}:${APP_VER}
          env:
          - name: PAUSE_ON_START
            value: "false"
          - name: TLS_PORT
            value: ${TLS_PORT}
          - name: DOMAIN_LIST
            value: ${DOMAIN_LIST}
          - name: TLS_FILE_PATH
            value: ${TLS_FILE_PATH}
          - name: SSCS_CERT
            value: ${SSCS_CERT}
          - name: SSCS_KEY
            value: ${SSCS_KEY}
          - name: APP_VER
            value: ${APP_VER}
          ports:
          - containerPort: ${TLS_PORT}
          volumeMounts:
          - mountPath: /cert
            name: cert
          - mountPath: /secrets
            name: sscs
        - name: ${SIDECAR_NAME}
          image: quay.io/dedgar/${SIDECAR_NAME}:${SIDECAR_VER}
          env:
          - name: PAUSE_ON_START
            value: "false"
          - name: LEGO_CERT
            value: "true"
          - name: USE_STAGE
            value: ${USE_STAGE}
          - name: TLS_PORT
            value: ${TLS_PORT}
          - name: CERT_EMAIL
            value: ${CERT_EMAIL}
          - name: DOMAIN_LIST
            value: ${DOMAIN_LIST}
          - name: CERT_PATH
            value: ${CERT_PATH}
          - name: CERT_SERVER_PROD
            value: ${CERT_SERVER_PROD}
          - name: CERT_SERVER_STAGE
            value: ${CERT_SERVER_STAGE}
          - name: TLS_FILE_PATH
            value: ${TLS_FILE_PATH}
          - name: SIDECAR_VER
            value: ${SIDECAR_VER}
          volumeMounts:
          - mountPath: /cert
            name: cert
        volumes:
        - name: cert
          emptyDir: {}
        - name: sscs
          secret:
            secretName: cert
parameters:
- name: DOMAIN_LIST
  description: Comma-separated domain names for which we'll request certificates from LetsEncrypt 
  value: "www.dedgar.com,www.shinobu.ninja,www.tacofreeze.com"
- name: CERT_EMAIL
  description: The email used with LetsEncrypt
  value: 'contact@shinobu.ninja'
- name: CERT_SERVER_PROD
  description: The name of the LetsEncrypt CA server
  value: 'https://acme-v02.api.letsencrypt.org/directory'
- name: CERT_SERVER_STAGE
  description: The name of the LetsEncrypt CA server
  value: 'https://acme-staging-v02.api.letsencrypt.org/directory'
- name: TLS_PORT
  description: Port that the application will use to listen for connections
  value: '8443'
- name: TLS_FILE_PATH
  description: The directory that will hold the Lego TLS .crt and .key files
  value: '/cert/certificates/'
- name: APP_NAME
  description: The name of the application to run from the start script and pull from the registry
  value: 'cert'
- name: SIDECAR_NAME
  description: The name of the sidecar container that provides the LE certs served by the main web server app
  value: 'pull'
- name: APP_VER
  description: The version of the application container. Used to pull images with this tag
  value: 'v0.0.10'
- name: SIDECAR_VER
  description: The version of the sidecar container. Used to pull images with this tag
  value: 'v0.0.7'
- name: SSCS_CERT
  description: The path to the cert file provided by SSCS
  value: '/secrets/tls.crt'
- name: SSCS_KEY
  description: The path to the key file provided by SSCS
  value: '/secrets/tls.key'
- name: USE_STAGE
  description: A boolean flag to determine whether the LetsEncrypt staging or production server is used
  value: 'false'
