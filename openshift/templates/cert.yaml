---
kind: Template
apiVersion: v1
metadata:
  name: cert
  annotations:
    description: cert site deployment, written in Golang
    tags: quickstart,golang,cert
    iconClass: icon-golang
labels:
  template: cert
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: cert
    annotations:
      description: Exposes and load balances the application pods
      service.alpha.openshift.io/serving-cert-secret-name: cert
  spec:
    ports:
    - name: 443-tcp
      port: 443
      targetPort: "${TLS_PORT}"
    selector:
      name: cert
- kind: ImageStream
  apiVersion: v1
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    creationTimestamp: null
    labels:
      app: cert
    name: cert
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: dedgar/"${APP_NAME}":latest
      from:
        kind: DockerImage
        name: quay.io/dedgar/"${APP_NAME}":latest
      importPolicy:
        scheduled: true
      name: "latest"
      referencePolicy:
        type: Source
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: cert
    annotations:
      description: Defines how to deploy the application server
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - cert
        from:
          kind: ImageStreamTag
          name: cert:latest
    - type: ConfigChange
    replicas: 1
    selector:
      name: cert
    template:
      metadata:
        name: cert
        labels:
          name: cert
      spec:
        containers:
        - name: cert
          image: cert
          env:
          - name: PAUSE_ON_START
            value: "false"
          - name: TLS_PORT
            value: "${TLS_PORT}"
          - name: APP_DOMAIN
            value: "${APP_DOMAIN}"
          - name: CERT_PATH
            value: "${CERT_PATH}"
          - name: CERT_FILENAME
            value: "${CERT_FILENAME}"
          - name: CERT_FILE
            value: "${CERT_FILE}"
          - name: KEY_FILE
            value: "${KEY_FILE}"
          - name: TLS_FILE_PATH
            value: "${TLS_FILE_PATH}"
          ports:
          - containerPort: "${TLS_PORT}" 
          volumeMounts:
          - mountPath: /cert
            name: cert
        - name: pull
          image: pull
          env:
          - name: PAUSE_ON_START
            value: "false"
          - name: LEGO_CERT
            value: "true"
          - name: TLS_PORT
            value: "${TLS_PORT}"
          - name: CERT_EMAIL
            value: "${CERT_EMAIL}"
          - name: APP_DOMAIN
            value: "${APP_DOMAIN}"
          - name: CERT_PATH
            value: "${CERT_PATH}"
          - name: CERT_FILENAME
            value: "${CERT_FILENAME}"
          - name: CERT_SERVER
            value: "${CERT_SERVER}"
          - name: CERT_FILE
            value: "${CERT_FILE}"
          - name: KEY_FILE
            value: "${KEY_FILE}"
          - name: TLS_FILE_PATH
            value: "${TLS_FILE_PATH}"
          volumeMounts:
          - mountPath: /cert
            name: cert
        volumes:
        - name: cert
          emptyDir: {}
parameters:
- name: APP_DOMAIN
  description: The exposed hostname that will route to the service, and be used with LetsEncrypt 
  value:
    - "www.dedgar.com"
- name: TLS_PORT
  description: Port that the application will use to listen for connections
  value: '8443'
- name: CERT_PATH 
  description: The path within the container that will contain the certs from LetsEncrypt
  value: '/cert/lego'
- name: CERT_FILENAME
  description: The name of the certificate files generated by LetsEncrypt
  value: 'cert'
- name: APP_NAME
  description: The name of the application to run from the start script and pull from the registry
  value: 'cert'
- name: CERT_FILE
  description: The name of the application to run from the start script and pull from the registry
  value: 'cert.crt'
- name: KEY_FILE
  description: The name of the application to run from the start script and pull from the registry
  value: 'cert.key'
- name: TLS_FILE_PATH
  description: The directory that will hold the TLS .crt and .key files
  value: '/cert/lego/certificates/'